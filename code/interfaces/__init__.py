"""
Paquete de interfaces gr√°ficas para OPTIM - Sistema de Programaci√≥n de Laboratorios

Este paquete contiene todas las ventanas y di√°logos de configuraci√≥n del sistema:
- Configuraci√≥n de calendario acad√©mico
- Configuraci√≥n de horarios semanales
- Visualizaci√≥n de resultados
- Sistema de ayuda (opcional)

Desarrollado para ETSIDI - UPM
Stack: Python + PyQt6 + Pandas
"""

# Importaciones principales
try:
    from .configurar_calendario import ConfigurarCalendario
    from .configurar_horarios import ConfigurarHorarios
    from .ver_resultados import VerResultados
    # from .ayuda import AyudaSistema  # Comentado por ahora - demasiado extenso

except ImportError as e:
    print(f"Error importando interfaces: {e}")

    # Definir clases dummy en caso de error
    class ConfigurarCalendario:
        def __init__(self, parent=None):
            print("‚ö†Ô∏è ConfigurarCalendario no disponible")


    class ConfigurarHorarios:
        def __init__(self, parent=None):
            print("‚ö†Ô∏è ConfigurarHorarios no disponible")


    class VerResultados:
        def __init__(self, parent=None):
            print("‚ö†Ô∏è VerResultados no disponible")

# Versi√≥n del paquete
__version__ = "1.0.0"
__author__ = "Javier Robles Molina"
__description__ = "Interfaces gr√°ficas para OPTIM - Sistema de Programaci√≥n de Laboratorios"

# Exportaciones p√∫blicas
__all__ = [
    'ConfigurarCalendario',
    'ConfigurarHorarios',
    'VerResultados',
    # 'AyudaSistema'  # Comentado por ahora
]

# Metadatos para integraci√≥n con gui_labs.py
INTERFACES_DISPONIBLES = {
    'calendario': ConfigurarCalendario,
    'horarios': ConfigurarHorarios,
    'resultados': VerResultados,
    # 'ayuda': AyudaSistema  # Comentado por ahora
}


def get_interface(nombre):
    """
    Obtener una clase de interfaz por nombre

    Args:
        nombre (str): Nombre de la interfaz ('calendario', 'horarios', 'resultados')

    Returns:
        class: Clase de la interfaz solicitada o None si no existe
    """
    return INTERFACES_DISPONIBLES.get(nombre.lower())


def listar_interfaces():
    """
    Listar todas las interfaces disponibles

    Returns:
        list: Lista de nombres de interfaces disponibles
    """
    return list(INTERFACES_DISPONIBLES.keys())


# Inicializaci√≥n del paquete
print("üì¶ Paquete 'interfaces' cargado correctamente")
print(f"‚úÖ {len(INTERFACES_DISPONIBLES)} interfaces disponibles: {', '.join(INTERFACES_DISPONIBLES.keys())}")