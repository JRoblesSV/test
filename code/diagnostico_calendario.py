#!/usr/bin/env python3
"""
Script de diagn√≥stico para encontrar el problema exacto
"""

import sys
import os
from PyQt6 import QtCore, QtGui, QtWidgets
from datetime import datetime


def test_basico():
    """Prueba b√°sica de PyQt6"""
    print("üß™ FASE 1: Prueba b√°sica PyQt6")
    try:
        app = QtWidgets.QApplication(sys.argv)
        print("‚úÖ QApplication creada")

        window = QtWidgets.QMainWindow()
        print("‚úÖ QMainWindow creada")

        window.setWindowTitle("Prueba B√°sica")
        window.resize(400, 300)
        print("‚úÖ Configuraci√≥n b√°sica OK")

        # Solo mostrar si no estamos en modo batch
        if len(sys.argv) == 1:
            window.show()
            print("‚úÖ Ventana mostrada - cerrando en 2 segundos...")
            QtCore.QTimer.singleShot(2000, app.quit)
            app.exec()

        return True
    except Exception as e:
        print(f"‚ùå Error en prueba b√°sica: {e}")
        return False


def test_widgets_complejos():
    """Probar widgets que pueden causar problemas"""
    print("\nüß™ FASE 2: Probando widgets complejos")

    widgets_problem√°ticos = []

    try:
        app = QtWidgets.QApplication(sys.argv)
        window = QtWidgets.QMainWindow()
        central = QtWidgets.QWidget()
        window.setCentralWidget(central)

        # Test QCalendarWidget
        try:
            calendar = QtWidgets.QCalendarWidget(central)
            print("‚úÖ QCalendarWidget OK")
        except Exception as e:
            print(f"‚ùå QCalendarWidget FALLA: {e}")
            widgets_problem√°ticos.append("QCalendarWidget")

        # Test QDateEdit
        try:
            date_edit = QtWidgets.QDateEdit(central)
            date_edit.setCalendarPopup(True)
            print("‚úÖ QDateEdit con popup OK")
        except Exception as e:
            print(f"‚ùå QDateEdit FALLA: {e}")
            widgets_problem√°ticos.append("QDateEdit")

        # Test QSpinBox
        try:
            spin = QtWidgets.QSpinBox(central)
            print("‚úÖ QSpinBox OK")
        except Exception as e:
            print(f"‚ùå QSpinBox FALLA: {e}")
            widgets_problem√°ticos.append("QSpinBox")

        return widgets_problem√°ticos

    except Exception as e:
        print(f"‚ùå Error general en widgets: {e}")
        return ["ERROR_GENERAL"]


def test_importacion_interfaces():
    """Probar importaci√≥n de interfaces"""
    print("\nüß™ FASE 3: Probando importaci√≥n interfaces")

    try:
        # Cambiar al directorio correcto
        if os.path.exists('interfaces'):
            print("‚úÖ Directorio interfaces encontrado")
        else:
            print("‚ùå Directorio interfaces NO encontrado")
            return False

        # Test importaci√≥n __init__.py
        try:
            from interfaces import ConfigurarCalendario, ConfigurarHorarios, VerResultados
            print("‚úÖ Importaci√≥n de interfaces OK")
        except Exception as e:
            print(f"‚ùå Error importando interfaces: {e}")
            return False

        # Test instanciaci√≥n b√°sica
        try:
            app = QtWidgets.QApplication(sys.argv)
            window = QtWidgets.QMainWindow()

            # Probar solo ConfigurarHorarios y VerResultados (que funcionan)
            horarios = ConfigurarHorarios(parent=window)
            print("‚úÖ ConfigurarHorarios instanciado OK")

            resultados = VerResultados(parent=window)
            print("‚úÖ VerResultados instanciado OK")

            # Probar ConfigurarCalendario
            calendario = ConfigurarCalendario(parent=window)
            print("‚úÖ ConfigurarCalendario instanciado OK")

        except Exception as e:
            print(f"‚ùå Error instanciando interfaces: {e}")
            import traceback
            traceback.print_exc()
            return False

        return True

    except Exception as e:
        print(f"‚ùå Error general en interfaces: {e}")
        return False


def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üî¨ DIAGN√ìSTICO DE CONFIGURAR CALENDARIO")
    print("=" * 50)

    # Cambiar al directorio code si existe
    if os.path.exists('code'):
        os.chdir('code')
        print("üìÅ Cambiado a directorio 'code'")

    # Fase 1: PyQt6 b√°sico
    if not test_basico():
        print("\n‚ùå PROBLEMA FUNDAMENTAL CON PyQt6")
        print("Soluci√≥n: Reinstalar PyQt6")
        return

    # Fase 2: Widgets complejos
    widgets_problem√°ticos = test_widgets_complejos()
    if widgets_problem√°ticos:
        print(f"\n‚ö†Ô∏è WIDGETS PROBLEM√ÅTICOS: {widgets_problem√°ticos}")

    # Fase 3: Interfaces
    if not test_importacion_interfaces():
        print("\n‚ùå PROBLEMA CON INTERFACES")
        return

    print("\nüéØ DIAGN√ìSTICO COMPLETADO")
    print("=" * 50)

    if not widgets_problem√°ticos:
        print("‚úÖ Todo parece estar bien - el problema puede ser espec√≠fico")
    else:
        print(f"‚ö†Ô∏è Evitar estos widgets: {widgets_problem√°ticos}")


if __name__ == "__main__":
    main()